/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template FILE, choose Tools | Templates
 * and open the template in the editor.
 */
package utils;

import Config.SystemConfig;
import cFramework.communications.spikes.LongSpike;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.opencv.core.Mat;

/**
 *
 * @author AxelADN
 */
public class DataStructure {

    public class Modalities {

        public static final int DEFAULT = 0;
        public static final int VISUAL_LOW = 1;
        public static final int VISUAL_MED = 2;
        public static final int VISUAL_HIGH = 3;
        public static final int MEMORY_DECLARATIVE = 4;
        public static final int MEMORY_WORKING = 5;
    }

    public static enum CHUNK_TYPE {
        IMAGE,
        COLS,
        ROWS,
    };

    public static class FeatureComparator implements Comparator<FeatureEntity> {

        @Override
        public int compare(FeatureEntity o1, FeatureEntity o2) {
            if (o1.getPriority() < o2.getPriority()) {
                return 1;
            } else if (o1.getPriority() > o2.getPriority()) {
                return -1;
            } else {
                return 0;
            }
        }

    }

    public static class FeatureEntity {

        private Mat feature;
        private double priority;
        private long ID;
        private boolean isQuad16 = false;
        private boolean isQuad4 = false;

        private static double currentPriority = 0;
        private static long currentID[] = new long[]{0, 0, 0};

        public FeatureEntity(Mat newFeature) {
            this.feature = newFeature;
            this.priority = currentPriority;
            currentPriority += SystemConfig.STANDAR_PRIORITY_INCREMENT;
            ID = currentID[0];
            currentID[0]++;
        }

        public void isQuad16() {
            if (!this.isQuad16) {
                this.isQuad16 = true;
                ID = currentID[2];
                ID += 2000000;
                currentID[2]++;
                currentID[0]--;
            }
        }

        public void isQuad4() {
            if (!this.isQuad4) {
                this.isQuad4 = true;
                ID = currentID[1];
                ID += 1000000;
                currentID[1]++;
                currentID[0]--;
            }
        }

        public void increasePriority() {
            this.priority += SystemConfig.STANDAR_PRIORITY_INCREMENT;
            currentPriority = this.priority;
        }

        public void increasePriority(double factor) {
            this.priority += (SystemConfig.STANDAR_PRIORITY_INCREMENT * factor);
            currentPriority = this.priority;
        }

        public double getPriority() {
            return this.priority;
        }

        public Mat getMat() {
            return this.feature;
        }

        public long getID() {
            return this.ID;
        }

        public void setID(long ID) {
            this.ID = ID;
        }
    }

    public static byte[] wrapDataID(ArrayList<Long> vals, int modality, int time) {
        ArrayList<byte[]> bytesArray = new ArrayList<>();
        vals.forEach((val) -> {
            bytesArray.add(Conversion.LongToByte(val));
        });
        try {
            LongSpike spike = new LongSpike(modality, 0, bytesArray, time);
            return spike.getByteArray();
        } catch (IOException ex) {
            Logger.getLogger(DataStructure.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new byte[]{0};
    }

    public static byte[] wrapData(ArrayList<Mat> imgs, int modality, int time) {
        ArrayList<matrix.matrix> bytesArray = new ArrayList<>();
        //ArrayList<byte[]> bytesArray = new ArrayList<>();
//        int cols = imgs.get(0).cols();
//        int rows = imgs.get(0).rows();
//        int type = imgs.get(0).type();
//        bytesArray.add(Conversion.IntToByte(cols));
//        bytesArray.add(Conversion.IntToByte(rows));
//        bytesArray.add(Conversion.IntToByte(type));
        imgs.forEach((img) -> {
            //bytesArray.add(Conversion.MatToByte(img));
            bytesArray.add(Convertor.MatToMatrix(img));
        });
        try {
            LongSpike spike = new LongSpike(modality, 0, bytesArray, time);
            return spike.getByteArray();
        } catch (IOException ex) {
            Logger.getLogger(DataStructure.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new byte[]{0};
    }

    public static byte[] wrapDataD(ArrayList<Mat> imgs, int modality, int time) {
        ArrayList<byte[]> bytesArray = new ArrayList<>();
        int cols = imgs.get(0).cols();
        int rows = imgs.get(0).rows();
        bytesArray.add(Conversion.IntToByte(cols));
        bytesArray.add(Conversion.IntToByte(rows));
        imgs.forEach((img) -> {
            bytesArray.add(Conversion.MatToByteD(img));
        });
        try {
            LongSpike spike = new LongSpike(modality, 0, bytesArray, time);
            return spike.getByteArray();
        } catch (IOException ex) {
            Logger.getLogger(DataStructure.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new byte[]{0};
    }

    public static ArrayList<Mat> getMats(byte[] bytes) {
        ArrayList<Mat> imgs = new ArrayList<>();
        ArrayList<matrix.matrix> bytesArray = new ArrayList<>();
        //ArrayList<byte[]> bytesArray = new ArrayList<>();
        try {
            //System.out.println("BYTES_SIZE..."+bytes.length);
            LongSpike spike = new LongSpike(bytes);
            bytesArray = (ArrayList<matrix.matrix>) spike.getIntensity();
//            int cols = Conversion.ByteToInt(bytesArray.get(0));
//            int rows = Conversion.ByteToInt(bytesArray.get(1));
//            int type = Conversion.ByteToInt(bytesArray.get(2));
            for (int i = 0; i < bytesArray.size(); i++) {
                //imgs.add(Conversion.ByteToMat(bytesArray.get(i), cols, rows, type));
                imgs.add(Convertor.matrixToMat(bytesArray.get(i)));
            }
        } catch (Exception ex) {
            Logger.getLogger(DataStructure.class.getName()).log(Level.SEVERE, null, ex);
        }
        return imgs;
    }

    public static ArrayList<Long> getIDs(byte[] bytes) {
        ArrayList<Long> IDs = new ArrayList<>();
        ArrayList<byte[]> bytesArray = new ArrayList<>();
        try {
            //System.out.println("BYTES_SIZE..."+bytes.length);
            LongSpike spike = new LongSpike(bytes);
            bytesArray = (ArrayList<byte[]>) spike.getIntensity();
            for (int i = 0; i < bytesArray.size(); i++) {
                IDs.add(Conversion.ByteToLong(bytesArray.get(i)));
            }
        } catch (Exception ex) {
            Logger.getLogger(DataStructure.class.getName()).log(Level.SEVERE, null, ex);
        }
        return IDs;
    }

    public static ArrayList<Mat> getMatsD(byte[] bytes) {
        ArrayList<Mat> imgs = new ArrayList<>();
        ArrayList<byte[]> bytesArray = new ArrayList<>();
        try {
            LongSpike spike = new LongSpike(bytes);
            bytesArray = (ArrayList<byte[]>) spike.getIntensity();
            int cols = Conversion.ByteToInt(bytesArray.get(0));
            int rows = Conversion.ByteToInt(bytesArray.get(1));
            for (int i = 2; i < bytesArray.size(); i++) {
                imgs.add(Conversion.ByteToMatD(bytesArray.get(i), cols, rows));
            }
        } catch (Exception ex) {
            Logger.getLogger(DataStructure.class.getName()).log(Level.SEVERE, null, ex);
        }
        return imgs;
    }

    public static int getTime(byte[] bytes) {
        int time = 0;
        try {
            LongSpike spike = new LongSpike(bytes);
            time = (int) spike.getTiming();
        } catch (Exception ex) {
            Logger.getLogger(DataStructure.class.getName()).log(Level.SEVERE, null, ex);
        }
        return time;
    }

    public static byte[] buildDataArray(byte[] img, byte[] cols, byte[] rows) {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream(img.length + Integer.BYTES + Integer.BYTES);
        try {
            outputStream.write(img);
            outputStream.write(cols);
            outputStream.write(rows);
        } catch (IOException ex) {
            Logger.getLogger(DataStructure.class.getName()).log(Level.SEVERE, null, ex);
        }
        return outputStream.toByteArray();
    }

    public static byte[] mergeBytes(byte[]... bytes) {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            for (byte[] img : bytes) {
                outputStream.write(img);
            }
        } catch (IOException ex) {
            Logger.getLogger(DataStructure.class.getName()).log(Level.SEVERE, null, ex);
        }
        return outputStream.toByteArray();
    }

    public static byte[] mergeBytesFromArray(ArrayList<byte[]> bytes) {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            for (byte[] data : bytes) {
                outputStream.write(data);
            }
        } catch (IOException ex) {
            Logger.getLogger(DataStructure.class.getName()).log(Level.SEVERE, null, ex);
        }
        return outputStream.toByteArray();
    }

    public static byte[] getChunk(byte[] data, CHUNK_TYPE chunkType) {
        byte[] outputData;
        int byteArraySize = data.length;
        switch (chunkType) {
            case IMAGE: {
                outputData = new byte[byteArraySize - (Integer.BYTES + Integer.BYTES)];
                for (int i = 0; i < byteArraySize - (Integer.BYTES + Integer.BYTES); i++) {
                    outputData[i] = data[i];
                }
            }
            break;
            case COLS: {
                outputData = new byte[Integer.BYTES];
                //System.out.println(byteArraySize);
                for (int i = 0; i < Integer.BYTES; i++) {
                    outputData[i] = data[byteArraySize - (Integer.BYTES + Integer.BYTES) + i];
                }
            }
            break;
            case ROWS: {
                outputData = new byte[Integer.BYTES];
                for (int i = 0; i < Integer.BYTES; i++) {
                    outputData[i] = data[byteArraySize - Integer.BYTES + i];
                }
            }
            break;
            default: {
                outputData = new byte[0];
            }
        }
        return outputData;
    }

    public static double[][][] getSecondOrderData() {
        double[][][] data = {{{1.0, 0.5557093828742683, 0.28829814791632835, 0.135186119349893, 0.29732803186828305, 0.02191068403028673, 0.3922685453155037, 0.25223438656157937, 0.3732500765349439, 0.23290853857299199,},
        {0.5557093828742683, 1.0, 0.6597993854894704, 0.4544552013395784, 0.6670209377296823, 0.32865282386055894, 0.7818729309227201, 0.6360630176953748, 0.7545291954473173, 0.6023870226481463,},
        {0.28829814791632835, 0.6597993854894704, 1.0, 0.3000206985192503, 0.5880443121832476, 0.3228485624444579, 0.6613753236467568, 0.6239017080616395, 0.6217128706367335, 0.6444124533198814,},
        {0.135186119349893, 0.4544552013395784, 0.3000206985192503, 1.0, 0.20121625490660255, 0.0, 0.4298939913561992, 0.3081389800215909, 0.3641129816898667, 0.2722927390338129,},
        {0.29732803186828305, 0.6670209377296823, 0.5880443121832476, 0.20121625490660255, 1.0, 0.32948634207587557, 0.6243950021132321, 0.6857574356641684, 0.6863312928146392, 0.696899312239022,},
        {0.02191068403028673, 0.32865282386055894, 0.3228485624444579, 0.0, 0.32948634207587557, 1.0, 0.35783091912580367, 0.3419606083629454, 0.36858237452917064, 0.34770103901608906,},
        {0.3922685453155037, 0.7818729309227201, 0.6613753236467568, 0.4298939913561992, 0.6243950021132321, 0.35783091912580367, 1.0, 0.7377677328676373, 0.7823835770263788, 0.7091734102111868,},
        {0.25223438656157937, 0.6360630176953748, 0.6239017080616395, 0.3081389800215909, 0.6857574356641684, 0.3419606083629454, 0.7377677328676373, 1.0, 0.8025460418110089, 0.8089817939790858,},
        {0.3732500765349439, 0.7545291954473173, 0.6217128706367335, 0.3641129816898667, 0.6863312928146392, 0.36858237452917064, 0.7823835770263788, 0.8025460418110089, 1.0, 0.7358379367914321,},
        {0.23290853857299199, 0.6023870226481463, 0.6444124533198814, 0.2722927390338129, 0.696899312239022, 0.34770103901608906, 0.7091734102111868, 0.8089817939790858, 0.7358379367914321, 1.0,},},
        {{1.0, 0.0, 0.16666666666666666, 0.05555555555555555, 0.3, 0.1875, 0.1111111111111111, 0.23076923076923078, 0.25, 0.2777777777777778,},
        {0.0, 1.0, 0.045454545454545456, 0.0, 0.0, 0.0625, 0.0, 0.07692307692307693, 0.08333333333333333, 0.05263157894736842,},
        {0.16666666666666666, 0.045454545454545456, 1.0, 0.14285714285714285, 0.3, 0.1875, 0.15789473684210525, 0.23076923076923078, 0.25, 0.15789473684210525,},
        {0.05555555555555555, 0.0, 0.14285714285714285, 1.0, 0.1, 0.125, 0.05263157894736842, 0.0, 0.08333333333333333, 0.10526315789473684,},
        {0.3, 0.0, 0.3, 0.1, 1.0, 0.2, 0.4, 0.2, 0.4, 0.4,},
        {0.1875, 0.0625, 0.1875, 0.125, 0.2, 1.0, 0.125, 0.3076923076923077, 0.3333333333333333, 0.3125,},
        {0.1111111111111111, 0.0, 0.15789473684210525, 0.05263157894736842, 0.4, 0.125, 1.0, 0.3076923076923077, 0.4166666666666667, 0.15789473684210525,},
        {0.23076923076923078, 0.07692307692307693, 0.23076923076923078, 0.0, 0.2, 0.3076923076923077, 0.3076923076923077, 1.0, 0.4166666666666667, 0.3076923076923077,},
        {0.25, 0.08333333333333333, 0.25, 0.08333333333333333, 0.4, 0.3333333333333333, 0.4166666666666667, 0.4166666666666667, 1.0, 0.5,},
        {0.2777777777777778, 0.05263157894736842, 0.15789473684210525, 0.10526315789473684, 0.4, 0.3125, 0.15789473684210525, 0.3076923076923077, 0.5, 1.0,},},
        {{1.0, 0.08163265306122448, 0.16326530612244897, 0.0, 0.12244897959183673, 0.20689655172413793, 0.16326530612244897, 0.23333333333333334, 0.21951219512195122, 0.10204081632653061,},
        {0.08163265306122448, 1.0, 0.046153846153846156, 0.0, 0.07547169811320754, 0.13793103448275862, 0.1206896551724138, 0.13333333333333333, 0.12195121951219512, 0.06153846153846154,},
        {0.16326530612244897, 0.046153846153846156, 1.0, 0.0, 0.1320754716981132, 0.1724137931034483, 0.13793103448275862, 0.2, 0.1951219512195122, 0.045454545454545456,},
        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.041666666666666664,},
        {0.12244897959183673, 0.07547169811320754, 0.1320754716981132, 0.0, 1.0, 0.20689655172413793, 0.16981132075471697, 0.3, 0.24390243902439024, 0.11320754716981132,},
        {0.20689655172413793, 0.13793103448275862, 0.1724137931034483, 0.0, 0.20689655172413793, 1.0, 0.1724137931034483, 0.3793103448275862, 0.5172413793103449, 0.1724137931034483,},
        {0.16326530612244897, 0.1206896551724138, 0.13793103448275862, 0.0, 0.16981132075471697, 0.1724137931034483, 1.0, 0.2, 0.1951219512195122, 0.06896551724137931,},
        {0.23333333333333334, 0.13333333333333333, 0.2, 0.0, 0.3, 0.3793103448275862, 0.2, 1.0, 0.5333333333333333, 0.2,},
        {0.21951219512195122, 0.12195121951219512, 0.1951219512195122, 0.0, 0.24390243902439024, 0.5172413793103449, 0.1951219512195122, 0.5333333333333333, 1.0, 0.21951219512195122,},
        {0.10204081632653061, 0.06153846153846154, 0.045454545454545456, 0.041666666666666664, 0.11320754716981132, 0.1724137931034483, 0.06896551724137931, 0.2, 0.21951219512195122, 1.0,},},
        {{1.0, 0.1111111111111111, 0.1871345029239766, 0.023391812865497075, 0.2898550724637681, 0.5047619047619047, 0.27906976744186046, 0.36220472440944884, 0.36607142857142855, 0.3629032258064516,},
        {0.1111111111111111, 1.0, 0.06857142857142857, 0.11428571428571428, 0.13768115942028986, 0.1523809523809524, 0.05426356589147287, 0.1889763779527559, 0.125, 0.12903225806451613,},
        {0.1871345029239766, 0.06857142857142857, 1.0, 0.028846153846153848, 0.18840579710144928, 0.18095238095238095, 0.1937984496124031, 0.14173228346456693, 0.16071428571428573, 0.22580645161290322,},
        {0.023391812865497075, 0.11428571428571428, 0.028846153846153848, 1.0, 0.07246376811594203, 0.0, 0.031007751937984496, 0.07874015748031496, 0.008928571428571428, 0.024193548387096774,},
        {0.2898550724637681, 0.13768115942028986, 0.18840579710144928, 0.07246376811594203, 1.0, 0.2857142857142857, 0.3488372093023256, 0.33858267716535434, 0.45535714285714285, 0.2903225806451613,},
        {0.5047619047619047, 0.1523809523809524, 0.18095238095238095, 0.0, 0.2857142857142857, 1.0, 0.2571428571428571, 0.3904761904761905, 0.2857142857142857, 0.26666666666666666,},
        {0.27906976744186046, 0.05426356589147287, 0.1937984496124031, 0.031007751937984496, 0.3488372093023256, 0.2571428571428571, 1.0, 0.25196850393700787, 0.26785714285714285, 0.24193548387096775,},
        {0.36220472440944884, 0.1889763779527559, 0.14173228346456693, 0.07874015748031496, 0.33858267716535434, 0.3904761904761905, 0.25196850393700787, 1.0, 0.2857142857142857, 0.22580645161290322,},
        {0.36607142857142855, 0.125, 0.16071428571428573, 0.008928571428571428, 0.45535714285714285, 0.2857142857142857, 0.26785714285714285, 0.2857142857142857, 1.0, 0.29464285714285715,},
        {0.3629032258064516, 0.12903225806451613, 0.22580645161290322, 0.024193548387096774, 0.2903225806451613, 0.26666666666666666, 0.24193548387096775, 0.22580645161290322, 0.29464285714285715, 1.0,},},
        {{1.0, 0.0, 0.10526315789473684, 0.15789473684210525, 0.21428571428571427, 0.05263157894736842, 0.058823529411764705, 0.09090909090909091, 0.08333333333333333, 0.10526315789473684,},
        {0.0, 1.0, 0.041666666666666664, 0.0, 0.14285714285714285, 0.08333333333333333, 0.11764705882352941, 0.18181818181818182, 0.16666666666666666, 0.09523809523809523,},
        {0.10526315789473684, 0.041666666666666664, 1.0, 0.08695652173913043, 0.07142857142857142, 0.041666666666666664, 0.058823529411764705, 0.18181818181818182, 0.16666666666666666, 0.19047619047619047,},
        {0.15789473684210525, 0.0, 0.08695652173913043, 1.0, 0.14285714285714285, 0.08695652173913043, 0.058823529411764705, 0.0, 0.16666666666666666, 0.23809523809523808,},
        {0.21428571428571427, 0.14285714285714285, 0.07142857142857142, 0.14285714285714285, 1.0, 0.07142857142857142, 0.14285714285714285, 0.2727272727272727, 0.16666666666666666, 0.21428571428571427,},
        {0.05263157894736842, 0.08333333333333333, 0.041666666666666664, 0.08695652173913043, 0.07142857142857142, 1.0, 0.058823529411764705, 0.18181818181818182, 0.08333333333333333, 0.09523809523809523,},
        {0.058823529411764705, 0.11764705882352941, 0.058823529411764705, 0.058823529411764705, 0.14285714285714285, 0.058823529411764705, 1.0, 0.18181818181818182, 0.3333333333333333, 0.17647058823529413,},
        {0.09090909090909091, 0.18181818181818182, 0.18181818181818182, 0.0, 0.2727272727272727, 0.18181818181818182, 0.18181818181818182, 1.0, 0.36363636363636365, 0.18181818181818182,},
        {0.08333333333333333, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.08333333333333333, 0.3333333333333333, 0.36363636363636365, 1.0, 0.25,},
        {0.10526315789473684, 0.09523809523809523, 0.19047619047619047, 0.23809523809523808, 0.21428571428571427, 0.09523809523809523, 0.17647058823529413, 0.18181818181818182, 0.25, 1.0,},},
        {{1.0, 0.02702702702702703, 0.08108108108108109, 0.0, 0.40540540540540543, 0.35135135135135137, 0.08108108108108109, 0.12903225806451613, 0.10810810810810811, 0.0,},
        {0.02702702702702703, 1.0, 0.0, 0.03773584905660377, 0.08, 0.018867924528301886, 0.11320754716981132, 0.06451612903225806, 0.06976744186046512, 0.05660377358490566,},
        {0.08108108108108109, 0.0, 1.0, 0.0, 0.10638297872340426, 0.1276595744680851, 0.06382978723404255, 0.0, 0.0, 0.0,},
        {0.0, 0.03773584905660377, 0.0, 1.0, 0.0, 0.0, 0.03333333333333333, 0.0, 0.0, 0.06666666666666667,},
        {0.40540540540540543, 0.08, 0.10638297872340426, 0.0, 1.0, 0.32, 0.08, 0.16129032258064516, 0.13953488372093023, 0.08,},
        {0.35135135135135137, 0.018867924528301886, 0.1276595744680851, 0.0, 0.32, 1.0, 0.05357142857142857, 0.1935483870967742, 0.09302325581395349, 0.0,},
        {0.08108108108108109, 0.11320754716981132, 0.06382978723404255, 0.03333333333333333, 0.08, 0.05357142857142857, 1.0, 0.12903225806451613, 0.06976744186046512, 0.01639344262295082,},
        {0.12903225806451613, 0.06451612903225806, 0.0, 0.0, 0.16129032258064516, 0.1935483870967742, 0.12903225806451613, 1.0, 0.5161290322580645, 0.0,},
        {0.10810810810810811, 0.06976744186046512, 0.0, 0.0, 0.13953488372093023, 0.09302325581395349, 0.06976744186046512, 0.5161290322580645, 1.0, 0.0,},
        {0.0, 0.05660377358490566, 0.0, 0.06666666666666667, 0.08, 0.0, 0.01639344262295082, 0.0, 0.0, 1.0,},},
        {{1.0, 0.18309859154929578, 0.24725274725274726, 0.0547112462006079, 0.25806451612903225, 0.16981132075471697, 0.13157894736842105, 0.21428571428571427, 0.3111111111111111, 0.7558139534883721,},
        {0.18309859154929578, 1.0, 0.28169014084507044, 0.07746478873239436, 0.11971830985915492, 0.1509433962264151, 0.008771929824561403, 0.17857142857142858, 0.17777777777777778, 0.15492957746478872,},
        {0.24725274725274726, 0.28169014084507044, 1.0, 0.10989010989010989, 0.12903225806451613, 0.07547169811320754, 0.03508771929824561, 0.08333333333333333, 0.2222222222222222, 0.0989010989010989,},
        {0.0547112462006079, 0.07746478873239436, 0.10989010989010989, 1.0, 0.06451612903225806, 0.0, 0.12280701754385964, 0.0, 0.0, 0.06201550387596899,},
        {0.25806451612903225, 0.11971830985915492, 0.12903225806451613, 0.06451612903225806, 1.0, 0.3018867924528302, 0.06140350877192982, 0.4880952380952381, 0.4222222222222222, 0.17419354838709677,},
        {0.16981132075471697, 0.1509433962264151, 0.07547169811320754, 0.0, 0.3018867924528302, 1.0, 0.08490566037735849, 0.42857142857142855, 0.4888888888888889, 0.2169811320754717,},
        {0.13157894736842105, 0.008771929824561403, 0.03508771929824561, 0.12280701754385964, 0.06140350877192982, 0.08490566037735849, 1.0, 0.047619047619047616, 0.08888888888888889, 0.12280701754385964,},
        {0.21428571428571427, 0.17857142857142858, 0.08333333333333333, 0.0, 0.4880952380952381, 0.42857142857142855, 0.047619047619047616, 1.0, 0.35555555555555557, 0.23809523809523808,},
        {0.3111111111111111, 0.17777777777777778, 0.2222222222222222, 0.0, 0.4222222222222222, 0.4888888888888889, 0.08888888888888889, 0.35555555555555557, 1.0, 0.24444444444444444,},
        {0.7558139534883721, 0.15492957746478872, 0.0989010989010989, 0.06201550387596899, 0.17419354838709677, 0.2169811320754717, 0.12280701754385964, 0.23809523809523808, 0.24444444444444444, 1.0,},},
        {{1.0, 0.15789473684210525, 0.10526315789473684, 0.21052631578947367, 0.18181818181818182, 0.11764705882352941, 0.21428571428571427, 0.3333333333333333, 0.2, 0.21052631578947367,},
        {0.15789473684210525, 1.0, 0.09090909090909091, 0.22727272727272727, 0.18181818181818182, 0.23529411764705882, 0.2857142857142857, 0.3333333333333333, 0.1, 0.09090909090909091,},
        {0.10526315789473684, 0.09090909090909091, 1.0, 0.16, 0.18181818181818182, 0.17647058823529413, 0.2857142857142857, 0.2222222222222222, 0.1, 0.08,},
        {0.21052631578947367, 0.22727272727272727, 0.16, 1.0, 0.45454545454545453, 0.11764705882352941, 0.5714285714285714, 0.3333333333333333, 0.3, 0.23076923076923078,},
        {0.18181818181818182, 0.18181818181818182, 0.18181818181818182, 0.45454545454545453, 1.0, 0.09090909090909091, 0.18181818181818182, 0.2222222222222222, 0.1, 0.36363636363636365,},
        {0.11764705882352941, 0.23529411764705882, 0.17647058823529413, 0.11764705882352941, 0.09090909090909091, 1.0, 0.21428571428571427, 0.3333333333333333, 0.3, 0.11764705882352941,},
        {0.21428571428571427, 0.2857142857142857, 0.2857142857142857, 0.5714285714285714, 0.18181818181818182, 0.21428571428571427, 1.0, 0.3333333333333333, 0.3, 0.2857142857142857,},
        {0.3333333333333333, 0.3333333333333333, 0.2222222222222222, 0.3333333333333333, 0.2222222222222222, 0.3333333333333333, 0.3333333333333333, 1.0, 0.1111111111111111, 0.2222222222222222,},
        {0.2, 0.1, 0.1, 0.3, 0.1, 0.3, 0.3, 0.1111111111111111, 1.0, 0.3,},
        {0.21052631578947367, 0.09090909090909091, 0.08, 0.23076923076923078, 0.36363636363636365, 0.11764705882352941, 0.2857142857142857, 0.2222222222222222, 0.3, 1.0,},},
        {{1.0, 0.14285714285714285, 0.06451612903225806, 0.1774193548387097, 0.10909090909090909, 0.30434782608695654, 0.28, 0.25, 0.27906976744186046, 0.16129032258064516,},
        {0.14285714285714285, 1.0, 0.03571428571428571, 0.08928571428571429, 0.12727272727272726, 0.21739130434782608, 0.26, 0.16666666666666666, 0.18604651162790697, 0.07142857142857142,},
        {0.06451612903225806, 0.03571428571428571, 1.0, 0.12345679012345678, 0.05454545454545454, 0.17391304347826086, 0.26, 0.1388888888888889, 0.18604651162790697, 0.08641975308641975,},
        {0.1774193548387097, 0.08928571428571429, 0.12345679012345678, 1.0, 0.07272727272727272, 0.17391304347826086, 0.48, 0.19444444444444445, 0.13953488372093023, 0.25,},
        {0.10909090909090909, 0.12727272727272726, 0.05454545454545454, 0.07272727272727272, 1.0, 0.43478260869565216, 0.16, 0.25, 0.27906976744186046, 0.07272727272727272,},
        {0.30434782608695654, 0.21739130434782608, 0.17391304347826086, 0.17391304347826086, 0.43478260869565216, 1.0, 0.4782608695652174, 0.7391304347826086, 0.5652173913043478, 0.17391304347826086,},
        {0.28, 0.26, 0.26, 0.48, 0.16, 0.4782608695652174, 1.0, 0.3611111111111111, 0.4418604651162791, 0.34,},
        {0.25, 0.16666666666666666, 0.1388888888888889, 0.19444444444444445, 0.25, 0.7391304347826086, 0.3611111111111111, 1.0, 0.3333333333333333, 0.16666666666666666,},
        {0.27906976744186046, 0.18604651162790697, 0.18604651162790697, 0.13953488372093023, 0.27906976744186046, 0.5652173913043478, 0.4418604651162791, 0.3333333333333333, 1.0, 0.16279069767441862,},
        {0.16129032258064516, 0.07142857142857142, 0.08641975308641975, 0.25, 0.07272727272727272, 0.17391304347826086, 0.34, 0.16666666666666666, 0.16279069767441862, 1.0,},},
        {{1.0, 0.21621621621621623, 0.23134328358208955, 0.11904761904761904, 0.17829457364341086, 0.20491803278688525, 0.1728395061728395, 0.208955223880597, 0.3793103448275862, 0.42424242424242425,},
        {0.21621621621621623, 1.0, 0.34234234234234234, 0.08108108108108109, 0.27927927927927926, 0.3333333333333333, 0.1728395061728395, 0.2972972972972973, 0.3103448275862069, 0.1981981981981982,},
        {0.23134328358208955, 0.34234234234234234, 1.0, 0.07936507936507936, 0.3798449612403101, 0.4180327868852459, 0.4074074074074074, 0.41044776119402987, 0.41379310344827586, 0.2196969696969697,},
        {0.11904761904761904, 0.08108108108108109, 0.07936507936507936, 1.0, 0.031746031746031744, 0.040983606557377046, 0.18518518518518517, 0.05555555555555555, 0.04597701149425287, 0.21428571428571427,},
        {0.17829457364341086, 0.27927927927927926, 0.3798449612403101, 0.031746031746031744, 1.0, 0.45081967213114754, 0.16049382716049382, 0.37209302325581395, 0.39080459770114945, 0.1937984496124031,},
        {0.20491803278688525, 0.3333333333333333, 0.4180327868852459, 0.040983606557377046, 0.45081967213114754, 1.0, 0.20987654320987653, 0.36885245901639346, 0.45977011494252873, 0.21311475409836064,},
        {0.1728395061728395, 0.1728395061728395, 0.4074074074074074, 0.18518518518518517, 0.16049382716049382, 0.20987654320987653, 1.0, 0.13580246913580246, 0.2222222222222222, 0.1728395061728395,},
        {0.208955223880597, 0.2972972972972973, 0.41044776119402987, 0.05555555555555555, 0.37209302325581395, 0.36885245901639346, 0.13580246913580246, 1.0, 0.3793103448275862, 0.18181818181818182,},
        {0.3793103448275862, 0.3103448275862069, 0.41379310344827586, 0.04597701149425287, 0.39080459770114945, 0.45977011494252873, 0.2222222222222222, 0.3793103448275862, 1.0, 0.3448275862068966,},
        {0.42424242424242425, 0.1981981981981982, 0.2196969696969697, 0.21428571428571427, 0.1937984496124031, 0.21311475409836064, 0.1728395061728395, 0.18181818181818182, 0.3448275862068966, 1.0,},},
        {{1.0, 0.0, 0.0, 0.07692307692307693, 0.16666666666666666, 0.07142857142857142, 0.07142857142857142, 0.14285714285714285, 0.0, 0.0,},
        {0.0, 1.0, 0.09090909090909091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0,},
        {0.0, 0.09090909090909091, 1.0, 0.18181818181818182, 0.0, 0.18181818181818182, 0.09090909090909091, 0.36363636363636365, 0.45454545454545453, 0.18181818181818182,},
        {0.07692307692307693, 0.0, 0.18181818181818182, 1.0, 0.16666666666666666, 0.15384615384615385, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.0,},
        {0.16666666666666666, 0.0, 0.0, 0.16666666666666666, 1.0, 0.08333333333333333, 0.16666666666666666, 0.08333333333333333, 0.16666666666666666, 0.16666666666666666,},
        {0.07142857142857142, 0.0, 0.18181818181818182, 0.15384615384615385, 0.08333333333333333, 1.0, 0.125, 0.25, 0.25, 0.125,},
        {0.07142857142857142, 0.0, 0.09090909090909091, 0.07692307692307693, 0.16666666666666666, 0.125, 1.0, 0.16666666666666666, 0.1875, 0.1111111111111111,},
        {0.14285714285714285, 0.0, 0.36363636363636365, 0.07692307692307693, 0.08333333333333333, 0.25, 0.16666666666666666, 1.0, 0.3125, 0.15789473684210525,},
        {0.0, 0.0625, 0.45454545454545453, 0.07692307692307693, 0.16666666666666666, 0.25, 0.1875, 0.3125, 1.0, 0.1875,},
        {0.0, 0.0, 0.18181818181818182, 0.0, 0.16666666666666666, 0.125, 0.1111111111111111, 0.15789473684210525, 0.1875, 1.0,},},
        {{1.0, 0.30434782608695654, 0.18604651162790697, 0.06976744186046512, 0.27906976744186046, 0.06976744186046512, 0.18604651162790697, 0.06976744186046512, 0.20930232558139536, 0.16279069767441862,},
        {0.30434782608695654, 1.0, 0.30434782608695654, 0.08695652173913043, 0.2608695652173913, 0.17391304347826086, 0.2608695652173913, 0.13043478260869565, 0.17391304347826086, 0.17391304347826086,},
        {0.18604651162790697, 0.30434782608695654, 1.0, 0.06818181818181818, 0.36363636363636365, 0.06818181818181818, 0.1590909090909091, 0.06818181818181818, 0.1590909090909091, 0.29545454545454547,},
        {0.06976744186046512, 0.08695652173913043, 0.06818181818181818, 1.0, 0.04081632653061224, 0.04081632653061224, 0.04081632653061224, 0.02040816326530612, 0.02040816326530612, 0.04081632653061224,},
        {0.27906976744186046, 0.2608695652173913, 0.36363636363636365, 0.04081632653061224, 1.0, 0.06666666666666667, 0.22448979591836735, 0.06666666666666667, 0.22807017543859648, 0.2692307692307692,},
        {0.06976744186046512, 0.17391304347826086, 0.06818181818181818, 0.04081632653061224, 0.06666666666666667, 1.0, 0.10204081632653061, 0.11627906976744186, 0.12280701754385964, 0.1346153846153846,},
        {0.18604651162790697, 0.2608695652173913, 0.1590909090909091, 0.04081632653061224, 0.22448979591836735, 0.10204081632653061, 1.0, 0.061224489795918366, 0.30612244897959184, 0.20408163265306123,},
        {0.06976744186046512, 0.13043478260869565, 0.06818181818181818, 0.02040816326530612, 0.06666666666666667, 0.11627906976744186, 0.061224489795918366, 1.0, 0.08771929824561403, 0.019230769230769232,},
        {0.20930232558139536, 0.17391304347826086, 0.1590909090909091, 0.02040816326530612, 0.22807017543859648, 0.12280701754385964, 0.30612244897959184, 0.08771929824561403, 1.0, 0.17307692307692307,},
        {0.16279069767441862, 0.17391304347826086, 0.29545454545454547, 0.04081632653061224, 0.2692307692307692, 0.1346153846153846, 0.20408163265306123, 0.019230769230769232, 0.17307692307692307, 1.0,},},
        {{1.0, 0.3389830508474576, 0.37719298245614036, 0.3161764705882353, 0.31343283582089554, 0.29936305732484075, 0.31496062992125984, 0.1910828025477707, 0.3111111111111111, 0.6705882352941176,},
        {0.3389830508474576, 1.0, 0.35964912280701755, 0.2542372881355932, 0.2542372881355932, 0.3220338983050847, 0.2627118644067797, 0.15254237288135594, 0.3, 0.3764705882352941,},
        {0.37719298245614036, 0.35964912280701755, 1.0, 0.49122807017543857, 0.2719298245614035, 0.42105263157894735, 0.30701754385964913, 0.21929824561403508, 0.2111111111111111, 0.36470588235294116,},
        {0.3161764705882353, 0.2542372881355932, 0.49122807017543857, 1.0, 0.2462686567164179, 0.3014705882352941, 0.25196850393700787, 0.20588235294117646, 0.26666666666666666, 0.27058823529411763,},
        {0.31343283582089554, 0.2542372881355932, 0.2719298245614035, 0.2462686567164179, 1.0, 0.208955223880597, 0.2755905511811024, 0.17164179104477612, 0.32222222222222224, 0.27058823529411763,},
        {0.29936305732484075, 0.3220338983050847, 0.42105263157894735, 0.3014705882352941, 0.208955223880597, 1.0, 0.33858267716535434, 0.18404907975460122, 0.28888888888888886, 0.4588235294117647,},
        {0.31496062992125984, 0.2627118644067797, 0.30701754385964913, 0.25196850393700787, 0.2755905511811024, 0.33858267716535434, 1.0, 0.3779527559055118, 0.37777777777777777, 0.5058823529411764,},
        {0.1910828025477707, 0.15254237288135594, 0.21929824561403508, 0.20588235294117646, 0.17164179104477612, 0.18404907975460122, 0.3779527559055118, 1.0, 0.2222222222222222, 0.24705882352941178,},
        {0.3111111111111111, 0.3, 0.2111111111111111, 0.26666666666666666, 0.32222222222222224, 0.28888888888888886, 0.37777777777777777, 0.2222222222222222, 1.0, 0.35294117647058826,},
        {0.6705882352941176, 0.3764705882352941, 0.36470588235294116, 0.27058823529411763, 0.27058823529411763, 0.4588235294117647, 0.5058823529411764, 0.24705882352941178, 0.35294117647058826, 1.0,},},
        {{1.0, 0.0, 0.1111111111111111, 0.1111111111111111, 0.1, 0.05555555555555555, 0.0, 0.05555555555555555, 0.08333333333333333, 0.05555555555555555,},
        {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05555555555555555, 0.08333333333333333, 0.0,},
        {0.1111111111111111, 0.0, 1.0, 0.09523809523809523, 0.2, 0.05555555555555555, 0.06666666666666667, 0.2222222222222222, 0.16666666666666666, 0.05263157894736842,},
        {0.1111111111111111, 0.0, 0.09523809523809523, 1.0, 0.1, 0.05555555555555555, 0.0, 0.05555555555555555, 0.08333333333333333, 0.05263157894736842,},
        {0.1, 0.0, 0.2, 0.1, 1.0, 0.1, 0.0, 0.2, 0.2, 0.4,},
        {0.05555555555555555, 0.0, 0.05555555555555555, 0.05555555555555555, 0.1, 1.0, 0.0, 0.2222222222222222, 0.0, 0.1111111111111111,},
        {0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.0, 1.0, 0.06666666666666667, 0.16666666666666666, 0.06666666666666667,},
        {0.05555555555555555, 0.05555555555555555, 0.2222222222222222, 0.05555555555555555, 0.2, 0.2222222222222222, 0.06666666666666667, 1.0, 0.25, 0.1111111111111111,},
        {0.08333333333333333, 0.08333333333333333, 0.16666666666666666, 0.08333333333333333, 0.2, 0.0, 0.16666666666666666, 0.25, 1.0, 0.08333333333333333,},
        {0.05555555555555555, 0.0, 0.05263157894736842, 0.05263157894736842, 0.4, 0.1111111111111111, 0.06666666666666667, 0.1111111111111111, 0.08333333333333333, 1.0,},},
        {{1.0, 0.05357142857142857, 0.03571428571428571, 0.0, 0.03571428571428571, 0.1875, 0.07142857142857142, 0.20689655172413793, 0.08695652173913043, 0.05357142857142857,},
        {0.05357142857142857, 1.0, 0.01639344262295082, 0.0, 0.06896551724137931, 0.21875, 0.03278688524590164, 0.2413793103448276, 0.021739130434782608, 0.08196721311475409,},
        {0.03571428571428571, 0.01639344262295082, 1.0, 0.0, 0.15517241379310345, 0.0625, 0.11594202898550725, 0.20689655172413793, 0.13043478260869565, 0.0759493670886076,},
        {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,},
        {0.03571428571428571, 0.06896551724137931, 0.15517241379310345, 0.0, 1.0, 0.125, 0.15517241379310345, 0.20689655172413793, 0.2391304347826087, 0.06896551724137931,},
        {0.1875, 0.21875, 0.0625, 0.0, 0.125, 1.0, 0.15625, 0.6206896551724138, 0.1875, 0.21875,},
        {0.07142857142857142, 0.03278688524590164, 0.11594202898550725, 0.0, 0.15517241379310345, 0.15625, 1.0, 0.27586206896551724, 0.08695652173913043, 0.028985507246376812,},
        {0.20689655172413793, 0.2413793103448276, 0.20689655172413793, 0.0, 0.20689655172413793, 0.6206896551724138, 0.27586206896551724, 1.0, 0.20689655172413793, 0.2413793103448276,},
        {0.08695652173913043, 0.021739130434782608, 0.13043478260869565, 0.0, 0.2391304347826087, 0.1875, 0.08695652173913043, 0.20689655172413793, 1.0, 0.043478260869565216,},
        {0.05357142857142857, 0.08196721311475409, 0.0759493670886076, 0.0, 0.06896551724137931, 0.21875, 0.028985507246376812, 0.2413793103448276, 0.043478260869565216, 1.0,},},
        {{1.0, 0.0, 0.12631578947368421, 0.064, 0.084, 0.39849624060150374, 0.215311004784689, 0.625, 0.25892857142857145, 0.7327586206896551,},
        {0.0, 1.0, 0.15151515151515152, 0.0, 0.09090909090909091, 0.0, 0.050505050505050504, 0.0, 0.0, 0.0,},
        {0.12631578947368421, 0.15151515151515152, 1.0, 0.2, 0.05789473684210526, 0.22556390977443608, 0.1736842105263158, 0.2159090909090909, 0.15178571428571427, 0.07758620689655173,},
        {0.064, 0.0, 0.2, 1.0, 0.21374045801526717, 0.22556390977443608, 0.07655502392344497, 0.18181818181818182, 0.2857142857142857, 0.017241379310344827,},
        {0.084, 0.09090909090909091, 0.05789473684210526, 0.21374045801526717, 1.0, 0.18796992481203006, 0.13875598086124402, 0.26136363636363635, 0.15178571428571427, 0.10344827586206896,},
        {0.39849624060150374, 0.0, 0.22556390977443608, 0.22556390977443608, 0.18796992481203006, 1.0, 0.41353383458646614, 0.5681818181818182, 0.39285714285714285, 0.27586206896551724,},
        {0.215311004784689, 0.050505050505050504, 0.1736842105263158, 0.07655502392344497, 0.13875598086124402, 0.41353383458646614, 1.0, 0.4431818181818182, 0.35714285714285715, 0.09482758620689655,},
        {0.625, 0.0, 0.2159090909090909, 0.18181818181818182, 0.26136363636363635, 0.5681818181818182, 0.4431818181818182, 1.0, 0.36363636363636365, 0.19318181818181818,},
        {0.25892857142857145, 0.0, 0.15178571428571427, 0.2857142857142857, 0.15178571428571427, 0.39285714285714285, 0.35714285714285715, 0.36363636363636365, 1.0, 0.09821428571428571,},
        {0.7327586206896551, 0.0, 0.07758620689655173, 0.017241379310344827, 0.10344827586206896, 0.27586206896551724, 0.09482758620689655, 0.19318181818181818, 0.09821428571428571, 1.0,},}};
        return data;
    }
}
