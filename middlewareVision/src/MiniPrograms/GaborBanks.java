/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MiniPrograms;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import utils.FileUtils;

/**
 *
 * @author Laptop
 */
public class GaborBanks extends javax.swing.JFrame {

    /**
     * Creates new form GaborBanks
     */
    ArrayList<Filter> FilterList;
    String fileName = "RFV1//Gabor//filters.txt";

    public GaborBanks() {
        initComponents();
        readBankFile();
        fillList();
    }

    void readBankFile() {
        FilterList = new ArrayList<>();
        File file = new File(fileName);
        String fileContent = FileUtils.readFile(file);
        String lines[] = fileContent.split("\\n");
        for (String st : lines) {
            String values[] = st.split(" ");
            Filter rf = new Filter(
                    Integer.parseInt(values[0]),
                    Double.parseDouble(values[1]),
                    Double.parseDouble(values[2]),
                    Double.parseDouble(values[3]),
                    Double.parseDouble(values[4]),
                    Double.parseDouble(values[5]));
            FilterList.add(rf);
        }
    }

    public void fillList() {
        clearTable();
        int i = 0;
        for (Filter rf : FilterList) {
            jTable1.setValueAt(rf.ksize, i, 0);
            jTable1.setValueAt(rf.sigma, i, 1);
            jTable1.setValueAt(rf.lambda, i, 2);
            jTable1.setValueAt(rf.gamma, i, 3);
            jTable1.setValueAt(rf.psi, i, 4);
            jTable1.setValueAt(rf.theta, i, 5);
            i++;
        }
    }

    public void clearTable() {

        for (int i = 0; i < jTable1.getRowCount(); i++) {
            for (int j = 0; j < jTable1.getColumnCount(); j++) {
                jTable1.setValueAt(null, i, j);
            }
        }
    }

    /**
     * check if the row is complete or not
     *
     * @param row
     * @return
     */
    public boolean CompleteRow(int row) {
        boolean band = true;
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            if (jTable1.getValueAt(row, i) == null) {
                band = false;
                break;
            }
        }
        return band;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ksize", "sigma", "lambda", "gamma", "psi (even)", "theta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("delete row");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("duplicate row");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("up");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("down");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("paste");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("copy");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(35, 35, 35)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        saveRFList();
        readBankFile();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void saveRFList() {
        FilterList.clear();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            if (CompleteRow(i)) {
                FilterList.add(new Filter((int) jTable1.getValueAt(i, 0), (double) jTable1.getValueAt(i, 1), (double) jTable1.getValueAt(i, 2),
                        (double) jTable1.getValueAt(i, 3), (double) jTable1.getValueAt(i, 4), (double) jTable1.getValueAt(i, 5)));
            }
        }
        String sList = "";
        for (Filter rf : FilterList) {
            sList = sList + rf.getString() + "\n";
        }
        FileUtils.write(fileName.replaceAll(".txt", ""), sList, "txt");
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        int s = FilterList.size();
        for (int i = s + 1; i > row; i--) {
            for (int j = 0; j < jTable1.getColumnCount(); j++) {
                jTable1.setValueAt(jTable1.getValueAt(i - 1, j), i, j);
            }
        }

        for (int j = 0; j < jTable1.getColumnCount(); j++) {
            jTable1.setValueAt(jTable1.getValueAt(row, j), row + 1, j);
        }

        jTable1.setRowSelectionInterval(jTable1.getSelectedRow() + 1, jTable1.getSelectedRow() + 1);
        saveRFList();
        readBankFile();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.setValueAt(null, row, i);
        }
        for (int i = row; i < jTable1.getRowCount(); i++) {
            for (int j = 0; j < jTable1.getColumnCount(); j++) {
                if (i < jTable1.getRowCount() - 1) {
                    jTable1.setValueAt(jTable1.getValueAt(i + 1, j), i, j);
                } else {
                    jTable1.setValueAt(null, i, j);
                }
            }
        }
        if (jTable1.getSelectedRow() >= 0) {
            if (jTable1.getSelectedRow() == FilterList.size() - 1) {
                jTable1.setRowSelectionInterval(row - 1, row - 1);
            }
        }
        saveRFList();
        readBankFile();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        saveRFList();
        int row = jTable1.getSelectedRow();
        if (row < FilterList.size() - 1) {
            for (int i = 0; i < jTable1.getColumnCount(); i++) {
                jTable1.setValueAt(jTable1.getValueAt(row + 1, i), row, i);
            }
            setValueAtRow(row + 1, row);
            if (jTable1.getSelectedRow() < FilterList.size()) {
                jTable1.setRowSelectionInterval(row + 1, row + 1);
            }
        }
        saveRFList();
        readBankFile();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        saveRFList();
        int row = jTable1.getSelectedRow();
        if (row < FilterList.size()) {
            if (jTable1.getSelectedRow() > 0) {
                for (int i = 0; i < jTable1.getColumnCount(); i++) {
                    jTable1.setValueAt(jTable1.getValueAt(row - 1, i), row, i);
                }
                setValueAtRow(row - 1, row);

                jTable1.setRowSelectionInterval(row - 1, row - 1);
            }
        }
        saveRFList();
        readBankFile();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable t = cb.getContents(this);


        DataFlavor dataFlavorStringJava;
        try {
            dataFlavorStringJava = new DataFlavor("application/x-java-serialized-object; class=java.lang.String");
            if (t.isDataFlavorSupported(dataFlavorStringJava)) {
                String texto = (String) t.getTransferData(dataFlavorStringJava);
                if(texto.contains("♦♣♠")){
                    int row = jTable1.getSelectedRow();
                    String values[]=texto.split(" ");
                    jTable1.setValueAt(Integer.parseInt(values[1]), row, 0);
                    jTable1.setValueAt(Double.parseDouble(values[2]), row, 1);
                    jTable1.setValueAt(Double.parseDouble(values[3]), row, 2);
                    jTable1.setValueAt(Double.parseDouble(values[4]), row, 3);
                    jTable1.setValueAt(Double.parseDouble(values[5]), row, 4);
                    jTable1.setValueAt(Double.parseDouble(values[6]), row, 5);
                }
            }
        } catch (Exception ex) {
            
        }


    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        String cString="♦♣♠ "+jTable1.getValueAt(row, 0)+" "+jTable1.getValueAt(row, 1)
                +" "+jTable1.getValueAt(row, 2)+" "+jTable1.getValueAt(row, 3)
                +" "+jTable1.getValueAt(row, 4)+" "+jTable1.getValueAt(row, 5);                       
        StringSelection stringSelection = new StringSelection(cString);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void setValueAtRow(int row, int index) {
        Filter rf = FilterList.get(index);
        jTable1.setValueAt(rf.ksize, row, 0);
        jTable1.setValueAt(rf.sigma, row, 1);
        jTable1.setValueAt(rf.lambda, row, 2);
        jTable1.setValueAt(rf.gamma, row, 3);
        jTable1.setValueAt(rf.psi, row, 4);
        jTable1.setValueAt(rf.theta, row, 5);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GaborBanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GaborBanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GaborBanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GaborBanks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GaborBanks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

class Filter {

    int ksize;
    double sigma;
    double lambda;
    double gamma;
    double psi;
    double theta;

    public Filter(int ksize, double sigma, double lambda, double gamma, double psi, double theta) {
        this.ksize = ksize;
        this.sigma = sigma;
        this.lambda = lambda;
        this.gamma = gamma;
        this.psi = psi;
        this.theta = theta;
    }

    public String getString() {
        return ksize + " " + sigma + " " + lambda + " " + gamma + " " + psi + " " + theta;
    }
}
