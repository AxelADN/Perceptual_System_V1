/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MiniPrograms;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.JTextField;
import mapOpener.Convertor;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import utils.MatrixUtils;
import utils.Scalr;
import utils.SpecialKernels;
import utils.filters.GaborFilter;

/**
 *
 * @author Laptop
 */
public class CurvatureRF extends javax.swing.JFrame {

    JTextField[] fields;
    GaborFilter mainGabor;
    int radius;
    double angleDisp;
    double kernelRotation;
    Mat concaveFilters[];
    Mat convexFilters[];
    Mat composedFilter;
    int numberFilters=5;
    BufferedImage fimg;
    /**
     * Creates new form NewJFrame
     */
    public CurvatureRF() {
        initComponents();
        loadFields();
        concaveFilters=new Mat[numberFilters];
        convexFilters=new Mat[numberFilters];
        for(int i=0;i<numberFilters;i++){
            concaveFilters[i]=new Mat();
            convexFilters[i]=new Mat();
        }
        mainGabor=new GaborFilter();
    }
    
    void loadFields(){
        fields=new JTextField[9];
        fields[0]=sizef;
        fields[1]=sigmaf;
        fields[2]=lambdaf;
        fields[3]=gammaf;
        fields[4]=psif;
        fields[5]=thetaf;        
        fields[6]=radiusf;
        fields[7]=anglef;       
        fields[8]=rotf;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rotf = new javax.swing.JTextField();
        sizef = new javax.swing.JTextField();
        sigmaf = new javax.swing.JTextField();
        lambdaf = new javax.swing.JTextField();
        gammaf = new javax.swing.JTextField();
        psif = new javax.swing.JTextField();
        thetaf = new javax.swing.JTextField();
        radiusf = new javax.swing.JTextField();
        anglef = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel12 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        filterImage = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Size");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel2.setText("kernel rotation");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 40, -1, -1));

        jLabel3.setText("sigma");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, -1, -1));

        jLabel4.setText("lambda");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, -1, -1));

        jLabel5.setText("gamma");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, -1, -1));

        jLabel6.setText("psi");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, -1, -1));

        jLabel7.setText("theta");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 40, -1, -1));

        jLabel8.setText("radius");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, -1, -1));

        rotf.setText("0");
        getContentPane().add(rotf, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 60, 60, -1));
        getContentPane().add(sizef, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 50, -1));
        getContentPane().add(sigmaf, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 50, -1));
        getContentPane().add(lambdaf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 50, -1));
        getContentPane().add(gammaf, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 50, -1));
        getContentPane().add(psif, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, 50, -1));
        getContentPane().add(thetaf, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, 50, -1));

        radiusf.setText("30");
        getContentPane().add(radiusf, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 60, 50, -1));

        anglef.setText("0.9");
        getContentPane().add(anglef, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, 60, -1));

        jLabel9.setText("angle disp");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, -1, -1));

        jLabel10.setText("Curvature parameters");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        jLabel11.setText("Gabor filter");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jButton1.setText("Generate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 60, 80, -1));

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 100, 250));

        jLabel12.setText("Name:");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, -1, -1));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 100, -1));

        jButton2.setText("Save");
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 100, -1, -1));

        jButton3.setText("Paste");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 100, 80, -1));

        jLabel13.setText("Filter image:");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, -1, -1));

        filterImage.setText("[]");
        getContentPane().add(filterImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 620, -1));
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 630, 10));
        getContentPane().add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 510, -1));

        jLabel15.setText("Files");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Paste values from the Gabor Filter Visualizer
     * @param evt 
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable t = cb.getContents(this);

        DataFlavor dataFlavorStringJava;
        try {
            dataFlavorStringJava = new DataFlavor("application/x-java-serialized-object; class=java.lang.String");
            if (t.isDataFlavorSupported(dataFlavorStringJava)) {
                String texto = (String) t.getTransferData(dataFlavorStringJava);
                if (texto.contains("♦♣♠")) {
                    String values[] = texto.split(" ");
                    for(int i=0;i<6;i++){
                       fields[i].setText(values[i+1]); 
                    }                                       
                }
            }
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        mainGabor.setParameters(toInt(fields[0].getText()), toDouble(fields[1].getText()), 
                toDouble(fields[2].getText()), toDouble(fields[3].getText()), toDouble(fields[4].getText()), 
                toDouble(fields[5].getText()));
        radius=toInt(fields[6].getText());
        angleDisp=toDouble(fields[7].getText());
        kernelRotation=toDouble(fields[8].getText());
        makeFilters();
    }//GEN-LAST:event_jButton1ActionPerformed

    void makeFilters(){
        Mat mainFilter=mainGabor.makeFilter();
        concaveFilters[0]=mainFilter.clone();
        convexFilters[0]=mainFilter.clone();
        composedFilter=Mat.zeros(concaveFilters[0].height(), concaveFilters[0].width(), CvType.CV_32FC1);
        for(int i=1;i<numberFilters;i++){
            if(i%2==0){
                concaveFilters[i]=SpecialKernels.rotateKernelRadians(mainFilter, radius, 0, angleDisp*(i/3+1));
                convexFilters[i]=SpecialKernels.rotateKernelRadians(mainFilter, -radius, 0, angleDisp*(i/3+1));
            }
            else{
                concaveFilters[i]=SpecialKernels.rotateKernelRadians(mainFilter, radius, 0, -angleDisp*(i/3+1));
                convexFilters[i]=SpecialKernels.rotateKernelRadians(mainFilter, -radius, 0, -angleDisp*(i/3+1));
            }
        }
        makeComposedFilter();
        loadImageFilters();
    }
    
    void makeComposedFilter(){
        for(int i=0;i<numberFilters;i++){
            Core.add(composedFilter, concaveFilters[i], composedFilter);
        }
        for(int i=1;i<numberFilters;i++){
            Core.add(composedFilter, convexFilters[i], composedFilter);
        }
    }
    
    void loadImageFilters() {
        fimg = Convertor.ConvertMat2FilterImage(composedFilter);
        //fimg = Scalr.resize(fimg, Integer.parseInt(kernelSize.getText()) * zoom);
        filterImage.setText("");
        filterImage.setIcon(new ImageIcon(fimg));
        //saveValues();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CurvatureRF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CurvatureRF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CurvatureRF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CurvatureRF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CurvatureRF().setVisible(true);
            }
        });
    }

    /**
     * Methods for shorten the conversion to double and integer
     *
     * @param text
     * @return
     */
    double toDouble(String text) {
        return Double.parseDouble(text);
    }

    int toInt(String text) {
        return Integer.parseInt(text);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField anglef;
    private javax.swing.JLabel filterImage;
    private javax.swing.JTextField gammaf;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField lambdaf;
    private javax.swing.JTextField psif;
    private javax.swing.JTextField radiusf;
    private javax.swing.JTextField rotf;
    private javax.swing.JTextField sigmaf;
    private javax.swing.JTextField sizef;
    private javax.swing.JTextField thetaf;
    // End of variables declaration//GEN-END:variables
}
