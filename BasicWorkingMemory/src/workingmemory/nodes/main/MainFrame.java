/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package workingmemory.nodes.main;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.Stack;
import workingmemory.core.tasks.ExperimentTask;
import workingmemory.gui.FrameNodeInterface;
import workingmemory.gui.ImageComponent;
import workingmemory.gui.UIUtils;

/**
 *
 * @author Luis Martin
 */
public class MainFrame extends javax.swing.JFrame {

    private FrameNodeInterface smallNode;

    /**
     * Creates new form MainFrame
     */
    private int totalObjects = 100;
    private int rows = 1;
    private int columns = 1;
    private int objects = 1;

    private Stack<Integer> imageList = new Stack();
    private Stack<int[]> positions = new Stack();

    //Avoid reload on reset
    private Stack<Integer> imageListTmp = new Stack();
    private Stack<int[]> positionsTmp = new Stack();

    private Random rand = new Random();

    /**
     * Control
     */
    private int currentScene = 0;
    private int targetID = 100;
    private boolean allowTransformation = false;
    private ArrayList<ImageComponent> sceneImages = new ArrayList<>();

    /**
     * *
     * Experiment control
     */
    private ExperimentTask experimentTask;

    public MainFrame(FrameNodeInterface smallNode) {
        this.smallNode = smallNode;
        initComponents();

        for (int i = 1; i <= 100; i++) {
            imageList.add(i);
        }

        Collections.shuffle(imageList);

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                positions.add(new int[]{i, j});
            }
        }

        Collections.shuffle(positions);

        //objects = (rows * columns) / 2;
        objects = 1;

        imageListTmp.addAll(imageList);

        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        testTxt = new javax.swing.JLabel();
        timerTxt = new javax.swing.JLabel();
        classNumTxt = new javax.swing.JTextField();
        setBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Working memory load");
        setResizable(false);

        contentPanel.setBackground(new java.awt.Color(25, 25, 25));
        contentPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        contentPanel.setLayout(null);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Current Image");

        testTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        testTxt.setText("Test No: 0");

        timerTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        timerTxt.setText("Timer:00");

        classNumTxt.setToolTipText("");

        setBtn.setText("Set");
        setBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(testTxt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 274, Short.MAX_VALUE)
                        .addComponent(timerTxt)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classNumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testTxt)
                    .addComponent(timerTxt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classNumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        experimentTask = new ExperimentTask(this);
        experimentTask.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        nextImage();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void setBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBtnActionPerformed
        loadImage(classNumTxt.getText());
        currentScene++;
        captureAndSend();
    }//GEN-LAST:event_setBtnActionPerformed

    /**
     * *
     * Control methods for GUI
     */
    public void captureAndSend() {

        String path = "captures";
        String name = "scene" + currentScene + "_capture";
        UIUtils.saveComponentToPNGImage(contentPanel, path, name);
        smallNode.actionPerformed(this, path + "/" + name + ".png", currentScene);
    }

    public void nextSecond(int second) {
        timerTxt.setText("Timer: 0" + second);
    }

    public void endLearningStage() {
        contentPanel.removeAll();
        contentPanel.repaint();
        timerTxt.setText("Timer: 0" + 0);
        testTxt.setText("Test No: 0" + 0);
    }

    public void loadImage(String idLabel) {
        
        int cpW = contentPanel.getSize().width;
        int cpH = contentPanel.getSize().height;

        int imgW = cpW / columns;
        int imgH = cpH / rows;
        
        int posX = 0;
        int posY = 0;
        
        int id = Integer.parseInt(idLabel);
        
        ImageComponent imgp = new ImageComponent("dataset/imgs/obj" + id + "__" + 0 + ".png", imgW, imgH);
        imgp.setId(id);
        imgp.setDegrees(0);
        imgp.setCol(posX);
        imgp.setRow(posY);

        contentPanel.add(imgp);
        
        imgp.setBounds(imgW * posX, imgH * posY, imgW, imgH);
    }

    public void nextImage() {
        if (imageListTmp.size() < objects) {
            System.out.println("Objetos insuficientes para la escena!");
            return;
        }

        contentPanel.removeAll();
        contentPanel.repaint();

        positionsTmp.addAll(positions);

        Collections.shuffle(positionsTmp);

        int cpW = contentPanel.getSize().width;
        int cpH = contentPanel.getSize().height;

        int imgW = cpW / columns;
        int imgH = cpH / rows;

        for (int i = 0; i < objects; i++) {
            int imageIndex = imageListTmp.pop();
            int position[] = positionsTmp.pop();

            int angle = 0;

            ImageComponent imgp = new ImageComponent("dataset/imgs/obj" + imageIndex + "__" + angle + ".png", imgW, imgH);
            imgp.setId(imageIndex);
            imgp.setDegrees(angle);
            imgp.setCol(position[1]);
            imgp.setRow(position[0]);

            /*
            if (imageIndex == targetID) {
                imgp.setIsTarget(true);
            }*/
            sceneImages.add(imgp);
            contentPanel.add(imgp);

            imgp.setBounds(imgW * position[1], imgH * position[0], imgW, imgH);
        }

        positionsTmp.removeAllElements();
        currentScene++;

        testTxt.setText("Test No: 0" + currentScene);

        captureAndSend();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField classNumTxt;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton setBtn;
    private javax.swing.JLabel testTxt;
    private javax.swing.JLabel timerTxt;
    // End of variables declaration//GEN-END:variables
}
