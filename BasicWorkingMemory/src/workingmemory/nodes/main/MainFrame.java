/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package workingmemory.nodes.main;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.Stack;
import workingmemory.gui.FrameNodeInterface;
import workingmemory.gui.ImageComponent;

/**
 *
 * @author Luis Martin
 */
public class MainFrame extends javax.swing.JFrame {

    private FrameNodeInterface smallNode;

    /**
     * Creates new form MainFrame
     */
    private int totalObjects = 100;
    private int rows = 5;
    private int columns = 4;
    private int objects = 1;

    private Stack<Integer> imageList = new Stack();
    private Stack<int[]> positions = new Stack();

    //Avoid reload on reset
    private Stack<Integer> imageListTmp = new Stack();
    private Stack<int[]> positionsTmp = new Stack();

    private Random rand = new Random();

    /**
     * Control
     */
    private int currentScene = 0;
    private int targetID = 100;
    private boolean allowTransformation = false;
    private ArrayList<ImageComponent> sceneImages = new ArrayList<>();

    public MainFrame(FrameNodeInterface smallNode) {
        this.smallNode = smallNode;
        initComponents();

        for (int i = 1; i <= 100; i++) {
            imageList.add(i);
        }

        Collections.shuffle(imageList);

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                positions.add(new int[]{i, j});
            }
        }

        Collections.shuffle(positions);

        objects = (rows * columns) / 2;

        imageListTmp.addAll(imageList);

        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        contentPanel.setBackground(new java.awt.Color(0, 0, 0));
        contentPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        contentPanel.setLayout(null);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Current cue");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))
                        .addGap(0, 78, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        smallNode.actionPerformed(this, "yeah motherfucker!");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (imageListTmp.size() < objects) {
            System.out.println("Objetos insuficientes para la escena!");
            return;
        }

        contentPanel.removeAll();
        contentPanel.repaint();

        positionsTmp.addAll(positions);

        Collections.shuffle(positionsTmp);

        int cpW = contentPanel.getSize().width;
        int cpH = contentPanel.getSize().height;

        int imgW = cpW / columns;
        int imgH = cpH / rows;

        for (int i = 0; i < objects; i++) {
            int imageIndex = imageListTmp.pop();
            int position[] = positionsTmp.pop();

            int angle = 0;

            ImageComponent imgp = new ImageComponent("dataset/imgs/obj" + imageIndex + "__" + angle + ".png", imgW, imgH);
            imgp.setId(imageIndex);
            imgp.setDegrees(angle);
            imgp.setCol(position[1]);
            imgp.setRow(position[0]);

            if (imageIndex == targetID) {
                imgp.setIsTarget(true);
            }

            sceneImages.add(imgp);
            contentPanel.add(imgp);

            imgp.setBounds(imgW * position[1], imgH * position[0], imgW, imgH);
        }

        positionsTmp.removeAllElements();
        currentScene++;

    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
